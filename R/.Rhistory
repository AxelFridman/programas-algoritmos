}
}
return((rotate(rotate(rotate(m/length(x))))))
}
rango = 0.015
totx = c()
toty = c()
for (j in c(1:10000)) {
x= runif(2, 0.49, 0.51)
y = runif(2, 0.49, 0.51)
for (i in c(2:500)) {
x[i] = x[i-1]+runif(1,-rango,rango)
y[i] = y[i-1]+runif(1,-rango,rango)
}
totx[j]=x[length(x)]
toty[j]=y[length(y)]
}
x = totx
y = toty
m = matrizAsociadaProbabilidad(x,y, 0,1,0,1, 10)
m
plot(x,y, xlim=c(0,1), ylim=c(0,1))
evaluarEnMatriz=function(m,x,y, xmin, xmax, ymin, ymax, tamanio){
for(c in c(1:ncol(m))){
stepX = (xmax-xmin)/tamanio
if(x<stepX*c+xmin & x>stepX*(c-1)+xmin ){
#Pertenece a columna c-esima
for(f in c(1:nrow(m))){
stepY = (ymax-ymin)/tamanio
if(y<stepY*f+xmin & y>stepY*(f-1)+xmin ){
return(m[c,f])
}
}
}
}
}
evaluarEnMatriz(m, 0.72,0.51,0,1,0,1,10)
m = matrizAsociadaProbabilidad(x,y, 0,1,0,1, 10)
m
plot(x,y, xlim=c(0,1), ylim=c(0,1))
z = c(1:length(x))
for (i in 1:length(x)) {
#print(x[i])
if(is.null(x[i])){
x[i]=0.5
}
if(is.null(y[i])){
y[i]=0.5
}
if(x[i]>=1){
x[i]=0.99
}
if(x[i]<=0){
x[i]=0.01
}
if(y[i]>=1){
y[i]=0.99
}
if(y[i]<=0){
y[i]=0.01
}
#print(i)
z[i]= evaluarEnMatriz(m, x[i],y[i],0,1,0,1,10)
}
length(z)
length(x)
length(y)
xs = x
ys = y
zs = z
fig <- plot_ly(x=~xs, y=~ys, z=~zs, type="scatter3d", mode="markers",  size = 1)
fig <- fig %>% layout(title = '3 zonas distribuicion',
xaxis = list(title = 'Superficie cubierta',
zeroline = TRUE,
range = c(0, 250)),
yaxis = list(title = 'Habitaciones',
range = c(0,1400)))
fig
df = read.csv("datos_alquiler_crossvalidation.csv", stringsAsFactors = F)
setwd("~/programas-algoritmos/R")
df = read.csv("datos_alquiler_crossvalidation.csv", stringsAsFactors = F)
df
MAE=function(x,y){
return(sum(abs(x-y))/length(x))¨
MAE=function(x,y){
return(sum(abs(x-y))/length(x))
}
PMAE=function(x,y){
return(sum(abs(x-y))/sum(abs(x)))
}
modleloPrecioSupCub = lm(df$price~df$surface_covered)
modleloPrecioSupCub = lm(df$price~df$surface_covered)
modleloPrecioSupCubyFondo= lm(df$price~df$surface_covered+df$fondo)
predict(modleloPrecioSupCub)
MAE(df$price, predict(modleloPrecioSupCub))
MAE(df$price, predict(modleloPrecioSupCub))
MAE(df$price, predict(modleloPrecioSupCub))
PMAE(df$price, predict(modleloPrecioSupCub))
MAE(df$price, predict(modleloPrecioSupCub))
PMAE(df$price, predict(modleloPrecioSupCub))
MAE(df$price, predict(modleloPrecioSupCubyFondo))
PMAE(df$price, predict(modleloPrecioSupCubyFondo))
mae1 = MAE(df$price, predict(modleloPrecioSupCub))
pmae1=PMAE(df$price, predict(modleloPrecioSupCub))
mae2= MAE(df$price, predict(modleloPrecioSupCubyFondo))
pmae2=PMAE(df$price, predict(modleloPrecioSupCubyFondo))
mae1 = MAE(df$price, predict(modleloPrecioSupCub))
pmae1=PMAE(df$price, predict(modleloPrecioSupCub))
mae2= MAE(df$price, predict(modleloPrecioSupCubyFondo))
pmae2=PMAE(df$price, predict(modleloPrecioSupCubyFondo))
plot(c(1,2), c(mae1, mae2))
mae1 = MAE(df$price, predict(modleloPrecioSupCub))
pmae1=PMAE(df$price, predict(modleloPrecioSupCub))
mae2= MAE(df$price, predict(modleloPrecioSupCubyFondo))
pmae2=PMAE(df$price, predict(modleloPrecioSupCubyFondo))
barplot(c(1,2), c(mae1, mae2))
mae1 = MAE(df$price, predict(modleloPrecioSupCub))
pmae1=PMAE(df$price, predict(modleloPrecioSupCub))
mae2= MAE(df$price, predict(modleloPrecioSupCubyFondo))
pmae2=PMAE(df$price, predict(modleloPrecioSupCubyFondo))
barplot(c(mae1, mae2))
df[sample(nrow(df), 3), ]
df[sample(nrow(df), 1), ]
sample(1:datos)
datos
sample(1:length(df[,1])
sample(1:length(df[1,])
sample(1:length(df[,1])
sample(c(1:length(df[,1]))
sample(c(1:length(df[1,]))
sample(df)
sample(df)
sample(1,df)
sample(df,1)
df[sample(nrow(df), 3), ]
datosTrain = df[sample(nrow(df), 3), ]
a = formula('x~y')
a[1]
a[[1]]
a[[2]]
a[[3]]
class(a[[3]])
as.character(a[[3]])
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosTrain = df[ind, ]
modeloActual = lm(modelo, data = datosTrain)
datosEval = df[-ind]
loPredecible = as.character(modelo[[2]])
errores[i] = fun_error(predict(modeloActual), datos$loPredecible)
}
return(errores)¨
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosTrain = df[ind, ]
modeloActual = lm(modelo, data = datosTrain)
datosEval = df[-ind]
loPredecible = as.character(modelo[[2]])
errores[i] = fun_error(predict(modeloActual), datos$loPredecible)
}
return(errores)
}
crossval(df,formula('df$price~df$surface_covered'), 10, PMAE, 10)
crossval(df,formula('df$price~df$surface_covered'), 10, MAE, 10)
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosTrain = df[ind, ]
datosEval = df[-ind]
modeloActual = lm(modelo, data = datosTrain)
loPredecible = as.character(modelo[[2]])
errores[i] = fun_error(predict(modeloActual), datos$loPredecible)
}
return(errores)
}
crossval(df,formula('df$price~df$surface_covered'), 10, MAE, 10)
n_obs = 10
fun_error = MAE
datos = df
ind = sample(nrow(df),n_obs)
datosTrain = df[ind, ]
datosEval = df[-ind]
modeloActual = lm(modelo, data = datosTrain)
modeloActual = lm(modelo, data = datosTrain)
modelo = formula('df$price~df$surface_covered')
modeloActual = lm(modelo, data = datosTrain)
modeloActual
loPredecible = as.character(modelo[[2]])
loPredecible
loPredecible = as.character(modelo[[2]])[3]
loPredecible
loPredecible
fun_error(predict(modeloActual), datos$loPredecible)
predict(modeloActual)
datos$loPredecible
datos$price
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosTrain = df[ind, ]
datosEval = df[-ind]
modeloActual = lm(modelo, data = datosTrain)
loPredecible = as.character(modelo[[2]])[3]
errores[i] = fun_error(predict(modeloActual), datos$price)
}
return(errores)
}
crossval(df,formula('df$price~df$surface_covered'), 10, MAE, 10)
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosTrain = df[ind, ]
datosEval = df[-ind]
modeloActual = lm(modelo, data = datosTrain)
loPredecible = as.character(modelo[[2]])[3]
errores[i] = fun_error(predict(modeloActual, datosEval), datos$price)
}
return(errores)
}
crossval(df,formula('df$price~df$surface_covered'), 10, MAE, 10)
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosTrain = df[ind, ]
datosEval = df[-ind]
modeloActual = lm(modelo, data = datosTrain)
loPredecible = as.character(modelo[[2]])[3]
errores[i] = fun_error(predict(modeloActual, datosEval), datos$price)
}
return(errores)
}
crossval(df,formula('df$price~df$surface_covered'), 10, MAE, 10)
crossval(df,formula('df$price~df$surface_covered'), 10, MAE, 10)
crossval(df,formula('df$price~df$surface_covered'), 10, MAE, 10)
crossval(df,formula('df$price~df$surface_covered'), 10, MAE, 10)
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosTrain = df[ind, ]
datosEval = df[-ind]
modeloActual = lm(modelo, data = datosTrain)
loPredecible = as.character(modelo[[2]])[3]
errores[i] = fun_error(predict(modeloActual, datosEval), datosEval$price)
}
return(errores)
}
crossval(df,formula('df$price~df$surface_covered'), 10, MAE, 10)
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosTrain = df[ind, ]
datosEval = df[-ind]
modeloActual = lm(modelo, data = datosTrain)
loPredecible = as.character(modelo[[2]])[3]
errores[i] = fun_error(predict(modeloActual, datosEval), datps$price)
}
return(errores)
}
crossval(df,formula('df$price~df$surface_covered'), 10, MAE, 10)
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosTrain = df[ind, ]
datosEval = df[-ind]
modeloActual = lm(modelo, data = datosTrain)
loPredecible = as.character(modelo[[2]])[3]
errores[i] = fun_error(predict(modeloActual, datosEval), datos$price)
}
return(errores)
}
crossval(df,formula('df$price~df$surface_covered'), 10, MAE, 10)
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosEval = df[ind,]
datosTrain = df[-ind, ]
modeloActual = lm(modelo, data = datosTrain)
loPredecible = as.character(modelo[[2]])[3]
errores[i] = fun_error(predict(modeloActual, datosEval), datos$price)
}
return(errores)
}
crossval(df,formula('df$price~df$surface_covered'), 10, MAE, 10)
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosEval = df[-ind,]
datosTrain = df[ind, ]
modeloActual = lm(modelo, data = datosTrain)
loPredecible = as.character(modelo[[2]])[3]
errores[i] = fun_error(predict(modeloActual, datosEval), datos$price)
}
return(errores)
}
crossval(df,formula('df$price~df$surface_covered'), 10, MAE, 10)
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosEval = df[ind,]
datosTrain = df[-ind, ]
modeloActual = lm(modelo, data = datosTrain)
loPredecible = as.character(modelo[[2]])[3]
errores[i] = fun_error(predict(modeloActual, datosEval), datos$price)
}
return(errores)
}
crossval(df,formula('df$price~df$surface_covered'), 10, MAE, 10)
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosEval = df[ind,]
datosTrain = df[-ind, ]
modeloActual = lm(modelo, data = datosTrain)
loPredecible = as.character(modelo[[2]])[3]
errores[i] = fun_error(predict(modeloActual, datosEval), datosEval$price)
}
return(errores)
}
crossval(df,formula('df$price~df$surface_covered'), 10, MAE, 10)
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosEval = df[ind,]
datosTrain = df[-ind, ]
modeloActual = lm(modelo, data = datosTrain)
loPredecible = as.character(modelo[[2]])[3]
#errores[i] = fun_error(predict(modeloActual, datosEval), datosEval$price)
}
return(errores)
}
crossval(df,formula('df$price~df$surface_covered'), 10, MAE, 10)
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosEval = df[ind,]
datosTrain = df[-ind, ]
modeloActual = lm(modelo, data = datosTrain)
loPredecible = as.character(modelo[[2]])[3]
errores[i] = fun_error(predict(modeloActual, datosEval), datosEval$price)
}
return(errores)
}
crossval(df,formula('df$price~df$surface_covered'), 10, MAE, 10)
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosEval = df[ind,]
datosTrain = df[-ind, ]
modeloActual = lm(modelo, data = datosTrain)
loPredecible = as.character(modelo[[2]])[3]
errores[i] = fun_error(datosEval$price, predict(modeloActual, datosEval))
}
return(errores)
}
crossval(df,formula('df$price~df$surface_covered'), 10, MAE, 10)
crossval(df,formula('df$price~df$surface_covered'), 10, PMAE, 10)
loPredecible = as.character(modelo[[2]])[3]
loPredecible
loPredecible = as.character(modelo[[2]])
loPredecible
modelo
crossval(df,formula('price~surface_covered'), 10, PMAE, 10)
crossval(df,formula('price~surface_covered'), 10, MAE, 10)
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosEval = df[ind,]
datosTrain = df[-ind, ]
modeloActual = lm(modelo, data = datosTrain)
loPredecible = as.character(modelo[[2]])
errores[i] = fun_error(datosEval$loPredecible, predict(modeloActual, datosEval))
}
return(errores)
}
crossval(df,formula('price~surface_covered'), 10, MAE, 10)
modelo
modelo = formula('price~surface_covered')
loPredecible = as.character(modelo[[2]])
loPredecible
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosEval = df[ind,]
datosTrain = df[-ind, ]
modeloActual = lm(modelo, data = datosTrain)
loPredecible = as.character(modelo[[2]])
errores[i] = fun_error(datosEval$loPredecible, predict(modeloActual, datosEval))
}
return(errores)
}
crossval(df,formula('price~surface_covered'), 10, MAE, 10)
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosEval = df[ind,]
datosTrain = df[-ind, ]
modeloActual = lm(modelo, data = datosTrain)
loPredecible = as.character(modelo[[2]])
print(datosEval$loPredecible)
errores[i] = fun_error(datosEval$loPredecible, predict(modeloActual, datosEval))
}
return(errores)
}
crossval(df,formula('price~surface_covered'), 10, MAE, 10)
loPredecible
loPredecible[1]
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosEval = df[ind,]
datosTrain = df[-ind, ]
modeloActual = lm(modelo, data = datosTrain)
loPredecible = as.character(modelo[[2]])[1]
print(datosEval$loPredecible)
errores[i] = fun_error(datosEval$loPredecible, predict(modeloActual, datosEval))
}
return(errores)
}
crossval(df,formula('price~surface_covered'), 10, MAE, 10)
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosEval = df[ind,]
datosTrain = df[-ind, ]
modeloActual = lm(modelo, data = datosTrain)
#loPredecible = as.character(modelo[[2]])
#print(datosEval$loPredecible)
errores[i] = fun_error(datosEval$price, predict(modeloActual, datosEval))
}
return(errores)
}
crossval(df,formula('price~surface_covered'), 10, MAE, 10)
crossval(df,formula('price~surface_covered'), 10, MAE, 10)
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosEval = df[ind,]
datosTrain = df[-ind, ]
modeloActual = lm(modelo, data = datosTrain)
#loPredecible = as.character(modelo[[2]])
#print(datosEval$loPredecible)
errores[i] = fun_error(datosEval$price, predict(modeloActual, datosEval))
}
#los errores obtenidos, el error promedio, su varianza, la formula
#del modelo empleado y el modelo ajustado usando todos los datos.
respuesta = list(errores, mean(errores), var(errores), modelo, lm(modelo, data = datos))
return(errores)
}
crossval = function(datos, modelo, n_obs, fun_error, n_muestras=10){
#¨df[sample(nrow(df), 3), ]
errores = c()
for(i in (1:n_muestras)){
ind = sample(nrow(df),n_obs)
datosEval = df[ind,]
datosTrain = df[-ind, ]
modeloActual = lm(modelo, data = datosTrain)
#loPredecible = as.character(modelo[[2]])
#print(datosEval$loPredecible)
errores[i] = fun_error(datosEval$price, predict(modeloActual, datosEval))
}
#los errores obtenidos, el error promedio, su varianza, la formula
#del modelo empleado y el modelo ajustado usando todos los datos.
respuesta = list(errores, mean(errores), var(errores), modelo, lm(modelo, data = datos))
return(respuesta)
}
crossval(df,formula('price~surface_covered'), 10, MAE, 10)
