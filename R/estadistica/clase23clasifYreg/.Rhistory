nadaryaWatson=ksmooth(train$range, train$int.conc, kernel = "normal", bandwidth = bw[i], x.points = test$range)
res[j] = evaluarSistema(test, nadaryaWatson)
}
resultados[i] =mean(res)
}
plot(bw, resultados, log = "xy")
which.min(resultados)
resultados = c()
for (i in c(1:length(bw))){
res = c()
for (j in c(1:100)){
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.5,0.5))
train  <- df[sample, ]
test   <- df[!sample, ]
nadaryaWatson=ksmooth(train$range, train$int.conc, kernel = "normal", bandwidth = bw[i], x.points = test$range)
res[j] = evaluarSistema(test, nadaryaWatson)
}
resultados[i] =mean(res)
}
plot(bw, resultados, log = "xy")
which.min(resultados)
setwd("~/programas-algoritmos/R/estadistica/clase23clasifYreg")
dfTrain = read.table("alturasEntre", header = T)
dfTrain = read.table("alturasEntre.txt", header = T)
dfTrain = read.table("alturasEntre.txt", header = T)
View(dfTrain)
View(dfTrain)
dfTrain = read.table("alturasEntre.txt", header = F)
View(dfTrain)
dfTrain = read.table("alturasEntre.txt", header = F)
dfTest = read.table("alturasPrueba.txt", header = F)
hist(dfTrain$V1)
library(ggplot2)
p <- ggplot(dfTrain, aes(y=as.factor(V2), x=V1, fill=V2)) +
geom_violin()
p
ggpairs(dfTrain)
library(GGally)
#d <- highlight_key(iris)
p <- ggpairs(dfTrain, aes(colour = V2), columns = 1:2)
ggplotly(p) %>%
highlight("plotly_selected")
library(GGally)
d <- highlight_key(dfTrain)
library(GGally)
p <- ggpairs(dfTrain, aes(colour = V2), columns = 1:2)
ggplotly(p) #%>%
dfTrain = read.table("alturasEntre.txt", header = F)
dfTest = read.table("alturasPrueba.txt", header = F)
colnames(dfTrain) = c("dd","aa")
dfTrain = read.table("alturasEntre.txt", header = F)
dfTest = read.table("alturasPrueba.txt", header = F)
colnames(dfTrain) = c("altura","sexo")
colnames(dfTest) = c("altura","sexo")
p <- ggplot(dfTrain, aes(y=as.factor(V2), x=V1, fill=V2)) +
geom_violin()
p
p <- ggplot(dfTrain, aes(y=as.factor(sexo), x=altura, fill=sexo)) +
geom_violin()
p
alturasMenos165 = dfTrain$altura - 165
alturasMenos165 = abs(dfTrain$altura - 165)
alturasMenos165 = abs(dfTrain$altura - 165)
alturasMenos175 = abs(dfTrain$altura - 175)
dfTrain$alt165 = alturasMenos165
dfTrain$alt165 = alturasMenos165
dfTrain$alt175 = alturasMenos175
dfT165 = dfTrain[order(dfTrain$alt165),]
View(dfT165)
dfT165$sexo[1:10]
mean(dfT165$sexo[1:10])
mean(dfT165$sexo[1:10])
mean(dfT175$sexo[1:10])
dfT165 = dfTrain[order(dfTrain$alt165),]
dfT175 = dfTrain[order(dfTrain$alt175),]
mean(dfT165$sexo[1:10])
mean(dfT175$sexo[1:10])
mean(dfT165$sexo[1:10])<1/2
mean(dfT175$sexo[1:10])<1/2
promediosMoviles = function(df, alturaAestimar, h){
df2 = df[df$altura > alturaAestimar-h && df$altura < alturaAestimar+h ,]
return(df2$sexo)
}
promediosMoviles(dfTrain, 165, 1.5)
promediosMoviles = function(df, alturaAestimar, h){
df2 = df[df$altura > alturaAestimar-h && df$altura < alturaAestimar+h ,]
return(df2)
}
promediosMoviles(dfTrain, 165, 1.5)
promediosMoviles(dfTrain, 165, 10.5)
promediosMoviles(dfTrain, 165, 1.5)
View(dfTrain)
promediosMoviles(dfTrain, 165, 1.5)
promediosMoviles = function(df, alturaAestimar, h){
df2 = df[df$altura > alturaAestimar-h && df$altura < alturaAestimar+h ,]
return(df2)
}
promediosMoviles(dfTrain, 165, 1.5)
df[df$altura > alturaAestimar-h && df$altura < alturaAestimar+h ,]
dfTrain[dfTrain$altura > alturaAestimar-h && dfTrain$altura < alturaAestimar+h ,]
dfTrain[dfTrain$altura > 165- 1.5 && dfTrain$altura < 165+ 1.5 ,]
dfTrain[dfTrain$altura > 165- 1.5]
dfTrain[dfTrain$altura > 165- 1.5,]
dfTrain[dfTrain$altura > 165 - 1.5,]
dfTrain[dfTrain$altura > 165 - 1.5 && dfTrain$altura < 165+ 1.5 ,]
dfTrain[ dfTrain$altura < 165+ 1.5 ,]
dfTrain[dfTrain$altura > 165 - 1.5 & dfTrain$altura < 165+ 1.5 ,]
promediosMoviles = function(df, alturaAestimar, h){
df2 = df[df$altura > alturaAestimar-h & df$altura < alturaAestimar+h ,]
return(df2)
}
promediosMoviles(dfTrain, 165, 1.5)
promediosMoviles = function(df, alturaAestimar, h){
df2 = df[df$altura > alturaAestimar-h & df$altura < alturaAestimar+h ,]
return(mean(df2$sexo))
}
promediosMoviles(dfTrain, 165, 1.5)
promediosMoviles(dfTrain, 175, 1.5)
promediosMoviles(dfTrain, 150, 1.5)
promediosMoviles(dfTrain, 170, 1.5)
promediosMoviles(dfTrain, 168, 1.5)
promediosMoviles(dfTrain, 169, 1.5)
promediosMoviles(dfTrain, 168, 1.5)
promediosMoviles(dfTrain, 167, 1.5)
promediosMoviles(dfTrain, 166, 1.5)
promediosMoviles(dfTrain, 165, 1.5)
promediosMoviles(dfTrain, 165.5, 1.5)
dff = data.frame(dfTrain$altura, dfTrain$sexo)
View(dff)
View(dfT165)
View(dfT175)
ClasificoVecinos =function(A,S,a,k){
alturasMenosA = abs(A - a)
dff = data.frame(S, alturasMenosA)
dff = dff[order(dff$alturasMenosA),]
if(mean(dff$S[1:k])<1/2){
return(0)
}
return(1)
}
ClasificoVecinos(dfTrain$altura, dfTrain$sexo, 1.78, 10)
ClasificoVecinos(dfTrain$altura, dfTrain$sexo, 1.98, 10)
ClasificoVecinos(dfTrain$altura, dfTrain$sexo, 1.38, 10)
ClasificoVecinos(dfTrain$altura, dfTrain$sexo, 1.38, 10)
dfTrain = read.table("alturasEntre.txt", header = F)
dfTest = read.table("alturasPrueba.txt", header = F)
colnames(dfTrain) = c("altura","sexo")
colnames(dfTest) = c("altura","sexo")
ClasificoVecinos =function(A,S,a,k){
alturasMenosA = abs(A - a)
dff = data.frame(S, alturasMenosA)
dff = dff[order(dff$alturasMenosA),]
print(dff)
if(mean(dff$S[1:k])<1/2){
return(0)
}
return(1)
}
ClasificoVecinos(dfTrain$altura, dfTrain$sexo, 1.38, 10)
ClasificoVecinos(dfTrain$altura, dfTrain$sexo, 138, 10)
ClasificoVecinos(dfTrain$altura, dfTrain$sexo, 178, 10)
ClasificoVecinos(dfTrain$altura, dfTrain$sexo, 188, 10)
ClasificoVecinos(dfTrain$altura, dfTrain$sexo, 175, 10)
ClasificoVecinos(dfTrain$altura, dfTrain$sexo, 165, 10)
ClasificoVecinos(dfTrain$altura, dfTrain$sexo, 166, 10)
ClasificoVecinos =function(A,S,a,k){
alturasMenosA = abs(A - a)
dff = data.frame(S, alturasMenosA)
dff = dff[order(dff$alturasMenosA),]
Â´  if(mean(dff$S[1:k])<1/2){
ClasificoVecinos(dfTrain$altura, dfTrain$sexo, 166, 10)
ClasificoVecinos =function(A,S,a,k){
alturasMenosA = abs(A - a)
dff = data.frame(S, alturasMenosA)
dff = dff[order(dff$alturasMenosA),]
if(mean(dff$S[1:k])<1/2){
return(0)
}
return(1)
}
ClasificoVecinos(dfTrain$altura, dfTrain$sexo, 166, 10)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in range(1, length(df$altura))){
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, df$altura[i], k)
}
df$pred = sexoPredicho
}
generarColumnaPredicciones(dfTrain, 10)
View(dfTrain)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in range(1, length(df$altura))){
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, df$altura[i], k)
}
df2 = df.copy()
df2$pred = sexoPredicho
return(df2)
}
generarColumnaPredicciones(dfTrain, 10)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in range(1, length(df$altura))){
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, df$altura[i], k)
}
df2 = copy(df)
df2$pred = sexoPredicho
return(df2)
}
generarColumnaPredicciones(dfTrain, 10)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in range(1, length(df$altura))){
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, df$altura[i], k)
}
df2 = data.frame(df)
df2$pred = sexoPredicho
return(df2)
}
generarColumnaPredicciones(dfTrain, 10)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in range(1, length(df$altura))){
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura)[i], k)
}
df2 = data.frame(df)
df2$pred = sexoPredicho
return(df2)
}
generarColumnaPredicciones(dfTrain, 10)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in range(1, length(df$altura))){
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura)[i], k)
}
df2 = data.frame(df)
df2$pred = sexoPredicho
return(sexoPredicho)
}
generarColumnaPredicciones(dfTrain, 10)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
print(df$altura)
for (i in range(1, length(df$altura))){
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura)[i], k)
}
df2 = data.frame(df)
df2$pred = sexoPredicho
return(sexoPredicho)
}
generarColumnaPredicciones(dfTrain, 10)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in range(1, length(df$altura))){
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura)[i], k)
}
df2 = data.frame(df)
df2$pred = sexoPredicho
return(sexoPredicho)
}
length(dfTrain$altura)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in range(1, length(df$altura))){
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura)[i], k)
}
df2 = data.frame(df)
df2$pred = sexoPredicho
return(sexoPredicho)
}
generarColumnaPredicciones(dfTrain, 10)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in range(1, length(df$altura))){
print((df$altura)[i])
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura)[i], k)
}
df2 = data.frame(df)
df2$pred = sexoPredicho
return(sexoPredicho)
}
generarColumnaPredicciones(dfTrain, 10)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in range(1, length(df$altura))){
print((df$altura)[i])
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura)[i], k)
}
df2 = data.frame(df)
df2$pred = sexoPredicho
return(sexoPredicho)
}
generarColumnaPredicciones(dfTrain, 10)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in range(1, length(df$altura))){
print((df$altura)[i])
print()
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura)[i], k)
}
df2 = data.frame(df)
df2$pred = sexoPredicho
return(sexoPredicho)
}
generarColumnaPredicciones(dfTrain, 10)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in range(1, length(df$altura))){
print((df$altura)[i])
print(" ")
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura)[i], k)
}
df2 = data.frame(df)
df2$pred = sexoPredicho
return(sexoPredicho)
}
generarColumnaPredicciones(dfTrain, 10)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in range(1, length(df$altura))){
print((df$altura)[i])
print(" ")
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura[i]), k)
}
df2 = data.frame(df)
df2$pred = sexoPredicho
return(sexoPredicho)
}
generarColumnaPredicciones(dfTrain, 10)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in range(1, length(df$altura))){
print((df$altura[i]))
print(" ")
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura[i]), k)
}
df2 = data.frame(df)
df2$pred = sexoPredicho
return(sexoPredicho)
}
generarColumnaPredicciones(dfTrain, 10)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in range(1, length(df$altura))){
print(i)
print(" ")
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura[i]), k)
}
df2 = data.frame(df)
df2$pred = sexoPredicho
return(sexoPredicho)
}
generarColumnaPredicciones(dfTrain, 10)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in c(1, length(df$altura))){
print(i)
print(" ")
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura[i]), k)
}
df2 = data.frame(df)
df2$pred = sexoPredicho
return(sexoPredicho)
}
generarColumnaPredicciones(dfTrain, 10)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in (1: length(df$altura))){
print(i)
print(" ")
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura[i]), k)
}
df2 = data.frame(df)
df2$pred = sexoPredicho
return(sexoPredicho)
}
generarColumnaPredicciones(dfTrain, 10)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in (1: length(df$altura))){
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura[i]), k)
}
df2 = data.frame(df)
df2$pred = sexoPredicho
return(sexoPredicho)
}
generarColumnaPredicciones(dfTrain, 10)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in (1: length(df$altura))){
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura[i]), k)
}
df2 = data.frame(df)
df2$pred = sexoPredicho
return(df2)
}
dfTrainConPred = generarColumnaPredicciones(dfTrain, 10)
k = 10
s = "pred" + as.character(k)
s = "pred", as.character(k)
s = paste("pred", as.character(k))
s
dfTrainConPred$s = dfTrain$altura
View(dfTrainConPred)
dfTrainConPred$"dd" = dfTrain$altura
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in (1: length(df$altura))){
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura[i]), k)
}
df2 = data.frame(df)
#s = paste("pred", as.character(k))
df2$paste("pred", as.character(k)) = sexoPredicho
return(df2)
}
dfTrainConPred = generarColumnaPredicciones(dfTrain, 10)
View(dfTrainConPred)
dfTrain = read.table("alturasEntre.txt", header = F)
dfTest = read.table("alturasPrueba.txt", header = F)
colnames(dfTrain) = c("altura","sexo")
colnames(dfTest) = c("altura","sexo")
dfTrainConPred = generarColumnaPredicciones(dfTrain, 10)
ClasificoVecinos =function(A,S,a,k){
alturasMenosA = abs(A - a)
dff = data.frame(S, alturasMenosA)
dff = dff[order(dff$alturasMenosA),]
if(mean(dff$S[1:k])<1/2){
return(0)
}
return(1)
}
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in (1: length(df$altura))){
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura[i]), k)
}
df2 = data.frame(df)
#s = paste("pred", as.character(k))
df2$paste("pred", as.character(k)) = sexoPredicho
return(df2)
}
dfTrainConPred = generarColumnaPredicciones(dfTrain, 10)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in (1: length(df$altura))){
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura[i]), k)
}
df2 = data.frame(df)
#s = paste("pred", as.character(k))
df2$k = sexoPredicho
return(df2)
}
dfTrainConPred = generarColumnaPredicciones(dfTrain, 10)
View(dfTrainConPred)
View(dfTrainConPred)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in (1: length(df$altura))){
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura[i]), k)
}
df2 = data.frame(df)
#s = paste("pred", as.character(k))
df2$as.character(k) = sexoPredicho
return(df2)
}
dfTrainConPred = generarColumnaPredicciones(dfTrain, 10)
View(dfTrainConPred)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in (1: length(df$altura))){
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura[i]), k)
}
df2 = data.frame(df)
s = paste("pred", k)
df2$s = sexoPredicho
return(df2)
}
dfTrainConPred = generarColumnaPredicciones(dfTrain, 10)
View(dfTrainConPred)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in (1: length(df$altura))){
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura[i]), k)
}
df2 = data.frame(df)
df2$pred = sexoPredicho
return(df2)
}
dfTrainConPred = generarColumnaPredicciones(dfTrain, 10)
View(dfTrainConPred)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in (1: length(df$altura))){
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura[i]), k)
}
df2 = data.frame(df)
cbind(df2, sexoPredicho)
return(df2)
}
dfTrainConPred = generarColumnaPredicciones(dfTrain, 10)
View(dfTrainConPred)
generarColumnaPredicciones = function(df, k){
sexoPredicho = c()
for (i in (1: length(df$altura))){
sexoPredicho[i] = ClasificoVecinos(df$altura, df$sexo, (df$altura[i]), k)
}
df2 = data.frame(df)
df2 = cbind(df2, sexoPredicho)
return(df2)
}
dfTrainConPred = generarColumnaPredicciones(dfTrain, 10)
View(dfTrainConPred)
