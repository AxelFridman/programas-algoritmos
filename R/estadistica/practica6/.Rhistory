promediosMoviles = function(datosX, datosY, valor, h){
dfe = data.frame(datosX,datosY)
df2 = dfe[dfe$datosX > valor-h & dfe$datosX < valor+h ,]
if(nrow(df)==0){
print(paste("valx ", valor))
print(paste("h ", h))
}
if(mean(df2$datosY)>1/2 ){
return(1)
}
return(0)
}
erroreshHumedad = c()
hum = dftrain$Humidity3pm
lluv = dftrain$RainTomorrow
for (i in (1: length(hPosibleHumedad))){
erroreshHumedad[i] = leaveOneOut(hum, lluv, hPosibleHumedad[i])
}
promediosMoviles = function(datosX, datosY, valor, h){
dfe = data.frame(datosX,datosY)
df2 = dfe[dfe$datosX > valor-h & dfe$datosX < valor+h ,]
if(nrow(df)==0){
print(paste("valx ", valor))
print(paste("h ", h))
}
if(mean(df2$datosY)>1/2 ){
return(1)
}
return(0)
}
erroreshHumedad = c()
hum = dftrain$Humidity3pm
lluv = dftrain$RainTomorrow
for (i in (1: length(hPosibleHumedad))){
erroreshHumedad[i] = leaveOneOut(hum, lluv, hPosibleHumedad[i])
}
promediosMoviles = function(datosX, datosY, valor, h){
dfe = data.frame(datosX,datosY)
df2 = dfe[dfe$datosX > valor-h & dfe$datosX < valor+h ,]
if(nrow(df2)==0){
print(paste("valx ", valor))
print(paste("h ", h))
}
if(mean(df2$datosY)>1/2 ){
return(1)
}
return(0)
}
erroreshHumedad = c()
hum = dftrain$Humidity3pm
lluv = dftrain$RainTomorrow
for (i in (1: length(hPosibleHumedad))){
erroreshHumedad[i] = leaveOneOut(hum, lluv, hPosibleHumedad[i])
}
View(dftrain)
promediosMoviles = function(datosX, datosY, valor, h){
dfe = data.frame(datosX,datosY)
df2 = dfe[dfe$datosX >= valor-h & dfe$datosX =< valor+h ,]
promediosMoviles = function(datosX, datosY, valor, h){
dfe = data.frame(datosX,datosY)
df2 = dfe[dfe$datosX >= valor-h & dfe$datosX <= valor+h ,]
if(nrow(df2)==0){
print(paste("valx ", valor))
print(paste("h ", h))
}
if(mean(df2$datosY)>1/2 ){
return(1)
}
return(0)
}
hPosibleHumedad = seq(1, 10, 0.8 )
hPosibleSunshine = seq(0.5, 4, 0.1 )
erroreshHumedad = c()
hum = dftrain$Humidity3pm
lluv = dftrain$RainTomorrow
for (i in (1: length(hPosibleHumedad))){
erroreshHumedad[i] = leaveOneOut(hum, lluv, hPosibleHumedad[i])
}
promediosMoviles = function(datosX, datosY, valor, h){
dfe = data.frame(datosX,datosY)
df2 = dfe[dfe$datosX >= valor-h & dfe$datosX <= valor+h ,]
while(nrow(df2)==0){
h = h*2
print(paste("valx ", valor))
print(paste("h ", h))
df2 = dfe[dfe$datosX >= valor-h & dfe$datosX <= valor+h ,]
}
if(mean(df2$datosY)>1/2 ){
return(1)
}
return(0)
}
erroreshHumedad = c()
hum = dftrain$Humidity3pm
lluv = dftrain$RainTomorrow
for (i in (1: length(hPosibleHumedad))){
erroreshHumedad[i] = leaveOneOut(hum, lluv, hPosibleHumedad[i])
}
promediosMoviles = function(datosX, datosY, valor, h){
dfe = data.frame(datosX,datosY)
df2 = dfe[dfe$datosX >= valor-h & dfe$datosX <= valor+h ,]
while(nrow(df2)==0){
h = h*2 # Si no me agarra a nadie para promediar, aumentame la ventanita. No suele pasar, solo outliers o extremos
df2 = dfe[dfe$datosX >= valor-h & dfe$datosX <= valor+h ,]
}
if(mean(df2$datosY)>1/2 ){
return(1)
}
return(0)
}
erroreshSunshine = c()
hum = df$Humidity3pm
lluv = df$RainTomorrow
for (i in (1: length(hPosibleSunshine))){
erroreshSunshine[i] = leaveOneOut(df$Sunshine, df$RainTomorrow, hPosibleSunshine[i])
}
erroreshHumedad = c()
hum = dftrain$Humidity3pm
lluv = dftrain$RainTomorrow
for (i in (1: length(hPosibleHumedad))){
erroreshHumedad[i] = leaveOneOut(hum, lluv, hPosibleHumedad[i])
}
erroreshSunshine = c()
hum = dftrain$Humidity3pm
lluv = dftrain$RainTomorrow
sun = dftrain$Sunshine
for (i in (1: length(hPosibleSunshine))){
erroreshSunshine[i] = leaveOneOut(sun, lluv, hPosibleSunshine[i])
}
plot(hPosibleHumedad , erroreshHumedad, type = "l")
plot(hPosibleSunshine , erroreshSunshine, type = "l")
hPosibleHumedad = seq(1, 30, 0.5 )
hPosibleSunshine = seq(0.5, 10, 0.1 )
erroreshHumedad = c()
hum = dftrain$Humidity3pm
lluv = dftrain$RainTomorrow
for (i in (1: length(hPosibleHumedad))){
erroreshHumedad[i] = leaveOneOut(hum, lluv, hPosibleHumedad[i])
}
erroreshSunshine = c()
hum = dftrain$Humidity3pm
lluv = dftrain$RainTomorrow
sun = dftrain$Sunshine
for (i in (1: length(hPosibleSunshine))){
erroreshSunshine[i] = leaveOneOut(sun, lluv, hPosibleSunshine[i])
}
plot(hPosibleHumedad , erroreshHumedad, type = "l")
plot(hPosibleSunshine , erroreshSunshine, type = "l")
erroreshHumedad
generarColumnaPrediccionesPromediosMoviles = function(datosX, datosY , h){
sexoPredicho = c()
for (i in (1: length(datosX))){
sexoPredicho[i] = promediosMoviles(datosX, datosY, (datosX[i]), h)
}
return(sexoPredicho)
}
generarColumnaPrediccionesPromediosMoviles = function(datosX, datosY , h){
predicho = c()
for (i in (1: length(datosX))){
predicho[i] = promediosMoviles(datosX, datosY, (datosX[i]), h)
}
return(predicho)
}
(generarColumnaPrediccionesPromediosMoviles(df$Sunshine, df$RainTomorrow, 1))
(generarColumnaPrediccionesPromediosMoviles(dftrain$Sunshine, dftrain$RainTomorrow, 1))
yhat = (generarColumnaPrediccionesPromediosMoviles(dftest$Sunshine, dftest$RainTomorrow, 0.8))
res = sum(abs(yhat-dftest$RainTomorrow))
res = sum(abs(yhat-dftest$RainTomorrow))/length(yhat)
res = sum(abs(yhat-dftest$RainTomorrow))/length(yhat)
print(paste("El porcentaje de error es ", res*100, " %") )
res = sum(abs(yhat-dftest$RainTomorrow))/length(yhat)
print(paste("El porcentaje de error es ", res*100, "%") )
library("ggplot2")
library("GGally")
df = read.csv("lluviaAus.csv")
df$RainToday = as.factor(df$RainToday) # paso variables categoricas como factor
df$RainTomorrow = as.factor(df$RainTomorrow)
df$X <- NULL # borro columna X ya que sospechamos que no representa nada sino que es algun tipo de "id" que quedo grabado en el dataframe y no tiene influencia en la observacion.
str(df)
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.8,0.2))
dftrain  <- data.frame(df[sample, ])
dftest   <- data.frame(df[!sample, ])
g = ggpairs(df, progress = FALSE, bins=10)+theme_bw()
g
print(paste("Correlacion humedad y presion (baja) " , cor(df$Humidity3pm, df$Pressure3pm) ))
print(paste("Correlacion maxTemp y temp a 3pm (muy alta)" , cor(df$Temp3pm, df$MaxTemp) ))
table(df$RainToday)
table(df$RainTomorrow)
dfLluvias = df[c("RainToday", "RainTomorrow")]
table(dfLluvias)
ggplot(df, aes(x=Sunshine, y=Humidity3pm, color=RainTomorrow)) +
geom_point()
ps<-ggplot(df, aes(x=Sunshine, fill=RainTomorrow)) +
geom_density(alpha=0.4) + labs(x= "Nivel de radiacion solar (Sunshine)",
subtitle="Grafico densidad radiacion solar") + geom_vline(xintercept=7.8, size=0.5, color="red")
ps
ph<-ggplot(df, aes(x=Humidity3pm, fill=RainTomorrow)) +
geom_density(alpha=0.4) + labs(x= "Nivel de humedad (Humidity3pm)",
subtitle="Grafico densidad humedad") + geom_vline(xintercept=62, size=0.5, color="red")
ph
p2<-ggplot(df, aes(y=Humidity3pm, x=RainTomorrow, fill=RainTomorrow)) +
geom_boxplot() + labs(x= "Nivel de humedad (Humidity3pm)",
subtitle="Boxplots humedad segun lluvia mañana")
p2
p3<-ggplot(df, aes(y=Sunshine, x=RainTomorrow, fill=RainTomorrow)) +
geom_boxplot() + labs(x= "Nivel de radiacion solar (Sunshine)",
subtitle="Boxplots radiacion solar segun lluvia mañana")
p3
dftrain$RainToday = ifelse(dftrain$RainToday=="Yes",1,0)
dftrain$RainTomorrow = ifelse(dftrain$RainTomorrow=="Yes",1,0)
dftest$RainToday = ifelse(dftest$RainToday=="Yes",1,0)
dftest$RainTomorrow = ifelse(dftest$RainTomorrow=="Yes",1,0)
promediosMoviles = function(datosX, datosY, valor, h){
dfe = data.frame(datosX,datosY)
df2 = dfe[dfe$datosX >= valor-h & dfe$datosX <= valor+h ,]
while(nrow(df2)==0){
h = h*2 # Si no me agarra a nadie para promediar, aumentame la ventanita. No suele pasar, solo outliers o extremos
df2 = dfe[dfe$datosX >= valor-h & dfe$datosX <= valor+h ,]
}
if(mean(df2$datosY)>1/2 ){
return(1)
}
return(0)
}
promediosMoviles(df$Sunshine, df$RainTomorrow, 8, 0.1)
promediosMoviles(df$Sunshine, df$RainTomorrow, 8, 0.1)
promediosMoviles(df$Sunshine, df$RainTomorrow, 8, 0.1)
promediosMoviles(df$Sunshine, df$RainTomorrow, 8, 0.1)
promediosMoviles = function(datosX, datosY, valor, h){
dfe = data.frame(datosX,datosY)
df2 = dfe[dfe$datosX >= valor-h & dfe$datosX <= valor+h ,]
while(nrow(df2)==0){
h = h*2 # Si no me agarra a nadie para promediar, aumentame la ventanita. No suele pasar, solo outliers o extremos
df2 = dfe[dfe$datosX >= valor-h & dfe$datosX <= valor+h ,]
}
if(mean(df2$datosY)>1/2 ){
return(1)
}
return(0)
}
promediosMoviles(df$Sunshine, df$RainTomorrow, 8, 0.1)
promediosMoviles(dftrain$Sunshine, dftrain$RainTomorrow, 8, 0.1)
promediosMoviles(dftrain$Humidity3pm, dftrain$RainTomorrow, 85, 2)
library("ggplot2")
library("GGally")
df = read.csv("lluviaAus.csv")
df$RainToday = as.factor(df$RainToday) # paso variables categoricas como factor
df$RainTomorrow = as.factor(df$RainTomorrow)
df$X <- NULL # borro columna X ya que sospechamos que no representa nada sino que es algun tipo de "id" que quedo grabado en el dataframe y no tiene influencia en la observacion.
str(df)
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.8,0.2))
dftrain  <- data.frame(df[sample, ])
dftest   <- data.frame(df[!sample, ])
g = ggpairs(df, progress = FALSE, bins=10)+theme_bw()
g
print(paste("Correlacion humedad y presion (baja) " , cor(df$Humidity3pm, df$Pressure3pm) ))
print(paste("Correlacion maxTemp y temp a 3pm (muy alta)" , cor(df$Temp3pm, df$MaxTemp) ))
table(df$RainToday)
table(df$RainTomorrow)
dfLluvias = df[c("RainToday", "RainTomorrow")]
table(dfLluvias)
ggplot(df, aes(x=Sunshine, y=Humidity3pm, color=RainTomorrow)) +
geom_point()
ps<-ggplot(df, aes(x=Sunshine, fill=RainTomorrow)) +
geom_density(alpha=0.4) + labs(x= "Nivel de radiacion solar (Sunshine)",
subtitle="Grafico densidad radiacion solar") + geom_vline(xintercept=7.8, size=0.5, color="red")
ps
ph<-ggplot(df, aes(x=Humidity3pm, fill=RainTomorrow)) +
geom_density(alpha=0.4) + labs(x= "Nivel de humedad (Humidity3pm)",
subtitle="Grafico densidad humedad") + geom_vline(xintercept=62, size=0.5, color="red")
ph
p2<-ggplot(df, aes(y=Humidity3pm, x=RainTomorrow, fill=RainTomorrow)) +
geom_boxplot() + labs(x= "Nivel de humedad (Humidity3pm)",
subtitle="Boxplots humedad segun lluvia mañana")
p2
p3<-ggplot(df, aes(y=Sunshine, x=RainTomorrow, fill=RainTomorrow)) +
geom_boxplot() + labs(x= "Nivel de radiacion solar (Sunshine)",
subtitle="Boxplots radiacion solar segun lluvia mañana")
p3
dftrain$RainToday = ifelse(dftrain$RainToday=="Yes",1,0)
dftrain$RainTomorrow = ifelse(dftrain$RainTomorrow=="Yes",1,0)
dftest$RainToday = ifelse(dftest$RainToday=="Yes",1,0)
dftest$RainTomorrow = ifelse(dftest$RainTomorrow=="Yes",1,0)
promediosMoviles = function(datosX, datosY, valor, h){
dfe = data.frame(datosX,datosY)
df2 = dfe[dfe$datosX >= valor-h & dfe$datosX <= valor+h ,]
while(nrow(df2)==0){
h = h*2 # Si no me agarra a nadie para promediar, aumentame la ventanita. No suele pasar, solo outliers o extremos
df2 = dfe[dfe$datosX >= valor-h & dfe$datosX <= valor+h ,]
}
if(mean(df2$datosY)>1/2 ){
return(1)
}
return(0)
}
promediosMoviles(dftrain$Sunshine, dftrain$RainTomorrow, 8, 0.1)
promediosMoviles(dftrain$Humidity3pm, dftrain$RainTomorrow, 85, 2)
leaveOneOut = function(datosX, datosY, h){
error = 0
for (i in (1: length(datosX))){
predichoI = promediosMoviles(datosX[-i], datosY[-i], datosX[i], h)
error = error + abs(predichoI - datosY[i])
}
return(error)
}
hPosibleHumedad = seq(1, 30, 0.5 )
hPosibleSunshine = seq(0.5, 10, 0.1 )
erroreshHumedad = c()
hum = dftrain$Humidity3pm
lluv = dftrain$RainTomorrow
for (i in (1: length(hPosibleHumedad))){
erroreshHumedad[i] = leaveOneOut(hum, lluv, hPosibleHumedad[i])
}
erroreshSunshine = c()
hum = dftrain$Humidity3pm
lluv = dftrain$RainTomorrow
sun = dftrain$Sunshine
for (i in (1: length(hPosibleSunshine))){
erroreshSunshine[i] = leaveOneOut(sun, lluv, hPosibleSunshine[i])
}
plot(hPosibleHumedad , erroreshHumedad, type = "l")
plot(hPosibleSunshine , erroreshSunshine, type = "l")
generarColumnaPrediccionesPromediosMoviles = function(datosX, datosY , h){
predicho = c()
for (i in (1: length(datosX))){
predicho[i] = promediosMoviles(datosX, datosY, (datosX[i]), h)
}
return(predicho)
}
yhat = (generarColumnaPrediccionesPromediosMoviles(dftest$Sunshine, dftest$RainTomorrow, 0.8))
res = sum(abs(yhat-dftest$RainTomorrow))/length(yhat)
print(paste("El porcentaje de error es ", res*100, "%") )
yhat = (generarColumnaPrediccionesPromediosMoviles(dftest$Sunshine, dftest$RainTomorrow, 0.8))
res = sum(abs(yhat-dftest$RainTomorrow))/length(yhat)
print(paste("El porcentaje de error es ", res*100, "%") )
set.seed(1)
set.seed(329)
res = sum(abs(yhat-dftest$RainTomorrow))/length(yhat)
print(paste("El porcentaje de error es ", res*100, "%") )
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.8,0.2))
dftrain  <- data.frame(df[sample, ])
dftest   <- data.frame(df[!sample, ])
yhat = (generarColumnaPrediccionesPromediosMoviles(dftest$Sunshine, dftest$RainTomorrow, 0.8))
yhat = (generarColumnaPrediccionesPromediosMoviles(dftest$Sunshine, dftest$RainTomorrow, 0.8))
dftrain$RainToday = ifelse(dftrain$RainToday=="Yes",1,0)
dftrain$RainTomorrow = ifelse(dftrain$RainTomorrow=="Yes",1,0)
dftest$RainToday = ifelse(dftest$RainToday=="Yes",1,0)
dftest$RainTomorrow = ifelse(dftest$RainTomorrow=="Yes",1,0)
promediosMoviles = function(datosX, datosY, valor, h){
dfe = data.frame(datosX,datosY)
df2 = dfe[dfe$datosX >= valor-h & dfe$datosX <= valor+h ,]
while(nrow(df2)==0){
h = h*2 # Si no me agarra a nadie para promediar, aumentame la ventanita. No suele pasar, solo outliers o extremos
df2 = dfe[dfe$datosX >= valor-h & dfe$datosX <= valor+h ,]
}
if(mean(df2$datosY)>1/2 ){
return(1)
}
return(0)
}
yhat = (generarColumnaPrediccionesPromediosMoviles(dftest$Sunshine, dftest$RainTomorrow, 0.8))
res = sum(abs(yhat-dftest$RainTomorrow))/length(yhat)
print(paste("El porcentaje de error es ", res*100, "%") )
qnorm(1.78)
qnorm(1.78)
pnorm(1.78)
1 - pnorm(1.78)
1.65- sqrt(20)/2
pnorm(/0.586)
pnorm(-0.586)
dat = c(4.377,2.74,4.22,5.864,3.526,2.861,1.887,3.533,2.328,3.365)
dat = c(4.377,2.74,4.22,5.864,3.526,2.861,1.887,3.533,2.328,3.365)
suma = sum(dat**3)
dat = c(4.377,2.74,4.22,5.864,3.526,2.861,1.887,3.533,2.328,3.365)
suma = sum(dat**3)
qgamma(0.95,10, 1/24)
plot(density(rgamma(10,1/24)))
plot(density(rgamma(100,10,1/24)))
plot(density(rgamma(1000,10,1/24)))
plot(density(rgamma(10000,10,1/24)))
plot(density(rgamma(10000,10,1/2)))
plot(density(rgamma(10000,10,1/200)))
plot(density(rgamma(10000,10,1/24)))
setwd("~/Downloads")
df = read.csv("student-mat.csv")
View(df)
df$X = NULL
View(df)
mod = lm(data = df, G3~.)
mod = lm(data = df, G3~.)
summary(mod)
modSign = lm(data = df, G3~famrel+G1+G2)
modSign = lm(data = df, G3~famrel+G1+G2)
summary(modSign)
qt(0.95, 391)
1.64876 * 0.05574
0.14 - 0.09190188
0.14 + 0.09190188
df$X = NULL # me deshago de columna de id
df$famsup = as.factor(df$famsup)
df$famrel = as.factor(df$famrel)
df$goout = as.factor(df$goout)
df$Dalc = as.factor(df$Dalc)
# las enteras del 1 al 5 se pasan como factor?
df = read.csv("student-mat.csv")
df$X = NULL # me deshago de columna de id
df$famsup = as.factor(df$famsup)
df$famrel = as.factor(df$famrel)
df$goout = as.factor(df$goout)
df$Dalc = as.factor(df$Dalc)
# las enteras del 1 al 5 se pasan como factor?
mod = lm(data = df, G3~.)
summary(mod)
modSign = lm(data = df, G3~G1+G2)
summary(modSign)
dfautos = read.table("autos.txt", header=T)
View(dfautos)
s = apply(dfautos, 2, sum)
s
df = read.csv("glakes.csv")
View(df)
df$X = NULL
View(df)
View(df)
mod = lm(data = df, Time ~. )
summary(mod)
qt(0.975, 29)
qt(0.975, 2)
qt(0.975, 1)
qt(0.975, 3)
qt(0.975, 300)
qt(0.975, 3000)
qt(0.975, 30000)
qt(0.975, 3000000)
2.04* 2.642633
12.344707 + 5.390971
12.344707 - 5.390971
qt(0.95, 29)
(12.34 - 10)/2.64
pt(0.886363)
pt(0.886363, 29)
1 - pt(0.886363, 29)
12.34 + 1000*0.006518
confint(mod,level = 0.95)
df = read.table("credit.txt", header = T)
df = read.table("credit.txt", header = F)
setwd("~/Desktop/programas-algoritmos/R/estadistica/practica6")
df = read.table("credit.txt", header = F)
df = read.table("credit.txt", header = T)
df = read.table("credit.txt")
df = read.table("credit")
df = read.table("credit.txt")
df = read.table("credit.txt")
df = read.csv("credit.txt")
View(df)
df$X = NULL
View(df)
View(df)
df$Gender = as.factor(df$Gender)
df$Student = as.factor(df$Student)
df$Married = as.factor(df$Married)
df$Ethnicity = as.factor(df$Ethnicity)
mod = lm(data = df, Balance ~.)
mod = lm(data = df, Balance ~.)
summary(mod)
ruidoFuerte = rnorm(100, 0, 1000)
x = c(1:100)
ruidoFuerte = rnorm(100, 0, 1000)
x = c(1:100)
y = 0.01*x + 2 + rnorm(100,0, 4)
plot(x,y)
ruidoFuerte = rnorm(100, 0, 1000)
x = c(1:100)
y = 3*x + 2 + rnorm(100,0, 4)
plot(x,y)
plot(x,y)
ruidoFuerte = rnorm(100, 0, 1000)
x = c(1:100)
y = 3*x + 2 + rnorm(100,0, 10)
plot(x,y)
df2 = data.frame(x,y, ruidoFuerte)
View(df2)
df2 = data.frame(x,y, ruidoFuerte)
mod2 = lm(data = df2, y~.)
View(mod2)
summary(mod2)
ruidoFuerte = rnorm(10, 0, 100)
x = c(1:10)
y = 3*x + 2 + rnorm(10,0, 10)
plot(x,y)
ruidoFuerte = rnorm(30, 0, 100)
x = c(1:30)
y = 3*x + 2 + rnorm(30,0, 10)
plot(x,y)
df2 = data.frame(x,y, ruidoFuerte)
mod2 = lm(data = df2, y~.)
summary(mod2)
ruidoFuerte = rnorm(30, 0, 0.001)
x = c(1:30)
y = 3*x + 2 + rnorm(30,0, 10)
plot(x,y)
df2 = data.frame(x,y, ruidoFuerte)
mod2 = lm(data = df2, y~.)
summary(mod2)
ruidoFuerte = rnorm(300, 0, 0.001)
x = c(1:300)
y = 3*x + 2 + rnorm(300,0, 10)
plot(x,y)
df2 = data.frame(x,y, ruidoFuerte)
mod2 = lm(data = df2, y~.)
summary(mod2)
mod2$coefficients
