eps = rnorm(100, 0, 1)
y = 2 + 2*x1 + 0.3 * x2 + eps
df = data.frame(x1, x2, y)
mod = lm(data = df, y~ x1+x2)
sumario = summary(mod)
sumario
mod$coefficients # son los coeficientes
cor(x1, x2)
plot(x1, x2)
x11 = runif(100, 0, 1)
x22 = x11 / 2 + rnorm(100)/10
eps2 = rnorm(100, 0, 1)
y2 = 2 + 2*x1 + 0.3 * x2 + eps2
df2 = data.frame(x11, x22, y2)
cor(x11, x22)
plot(x11, x22)
plot(x11, x22)
mod2 = lm(data = df2, y2~x11 + x22)
summary(mod2)
df = read.csv("cemento.txt")
View(df)
df = read.table("cemento.txt")
View(df)
df = read.table("cemento.txt", header = T)
View(df)
setwd("~/Desktop/programas-algoritmos/R/estadistica/practica6")
df = read.table("cemento.txt", header = T)
View(df)
cor(df)
mod = lm(data = df, y~.)
sumario = summary(mod)
sumario
sum(df$x1, df$x2, df$x3,df$x4,df$x5)
suma = (df$x1 + df$x2 + df$x3 + df$x4 + df$x5)
suma = (df$x1 + df$x2 + df$x3 + df$x4 + df$x5)
df$s = suma
View(df)
plot(df$s, df$y)
cor(df)
mod2 = lm(data = df, y~. -1)
sumario2 = summary(mod2)
sumario2
View(df)
mod2 = lm(data = df, y~ x1 + x2 + x3 + x4 + x5 +s)
sumario2 = summary(mod2)
sumario2
mod2 = lm(data = df, y~ x1 + x2 + x3 + x4 + x5 +s -1)
sumario2 = summary(mod2)
sumario2
View(df)
mod2 = lm(data = df, y~ x1 + x2 + x3 + x4 + x5 -1)
sumario2 = summary(mod2)
sumario2
mod3= lm(data = df, y~ x2 + x3 + x4  -1)
sumario3 = summary(mod3)
sumario3
mod3= lm(data = df, y~ x1 + x2 + x3 + x4  -1)
sumario3 = summary(mod3)
sumario3
mod3= lm(data = df, y~ x2 + x3 + x4  -1)
sumario3 = summary(mod3)
sumario3
errorCuadraticoMedio = function(y, yhat){
return(mean((y-yhat)**2))
}
looLM = function(datos, evaluador){
erroresA = c()
erroresB = c()
erroresC = c()
for (i in 1:nrow(datos)){
train = datos[datos$indice != i,]
test = datos[datos$indice == i,]
modeloA = lm(data=train, y ~ x1 + x2 + x3 + x4 + x5)
modeloB = lm(data=train, y~ x1 + x2 + x3 + x4 + x5 -1)
modeloC = lm(data=train, y~ x2 + x3 + x4  -1)
yhatTestA =  predict(modeloA, newdata = test )
erroresA[i] = evaluador(test$y, yhatTestA)
yhatTestB =  predict(modeloB, newdata = test )
erroresB[i] = evaluador(test$y, yhatTestB)
yhatTestC =  predict(modeloC, newdata = test )
erroresC[i] = evaluador(test$y, yhatTestC)
}
res = c(mean(erroresA),mean(erroresB),mean(erroresC))
return(res)
}
looLM(df, errorCuadraticoMedio)
df$indice = 1:14
looLM(df, errorCuadraticoMedio)
errorCuadraticoMedio = function(y, yhat){
return(((y-yhat)**2))
}
looLM = function(datos, evaluador){
erroresA = c()
erroresB = c()
erroresC = c()
for (i in 1:nrow(datos)){
train = datos[datos$indice != i,]
test = datos[datos$indice == i,]
modeloA = lm(data=train, y ~ x1 + x2 + x3 + x4 + x5)
modeloB = lm(data=train, y~ x1 + x2 + x3 + x4 + x5 -1)
modeloC = lm(data=train, y~ x2 + x3 + x4  -1)
yhatTestA =  predict(modeloA, newdata = test )
erroresA[i] = evaluador(test$y, yhatTestA)
yhatTestB =  predict(modeloB, newdata = test )
erroresB[i] = evaluador(test$y, yhatTestB)
yhatTestC =  predict(modeloC, newdata = test )
erroresC[i] = evaluador(test$y, yhatTestC)
}
res = c(mean(erroresA),mean(erroresB),mean(erroresC))
return(res)
}
df$indice = 1:14
looLM(df, errorCuadraticoMedio)
setwd("~/Desktop/programas-algoritmos/R/estadistica/practica6")
n = 100
x1 = runif(n, 0,5 )
n = 100
x1 = runif(n, 0,5 )
n = 100
x1 = runif(n, 0,5 )
x2 = runif(n, 0,5 )
x3 = 2*x1 + runif(n, -0.1, 0.1 )
x4 = -1*x1 + runif(n, -0.1, 0.1 )
y = 5 + 8*x1 - 5*x2 + x3 + 4*x4 + rnorm(n, 0, 1)
n = 100
x1 = runif(n, 0,5 )
x2 = runif(n, 0,5 )
x3 = 2*x1 + runif(n, -0.1, 0.1 )
x4 = -1*x1 + runif(n, -0.1, 0.1 )
y = 5 + 8*x1 - 5*x2 + x3 + 4*x4 + rnorm(n, 0, 1)
df = data.frame(x1, x2, x3, x4, y)
View(df)
cor(df)
esSignificativosCoeficientes = function(coeficientes, alpha=0.05){
}
mod = lm(data = df, y ~.)
mod = lm(data = df, y ~.)
mod$coefficients
generarDatos = function(n=100){
x1 = runif(n, 0,5 )
x2 = runif(n, 0,5 )
x3 = 2*x1 + runif(n, -0.1, 0.1 )
x4 = -1*x1 + runif(n, -0.1, 0.1 )
y = 5 + 8*x1 - 5*x2 + x3 + 4*x4 + rnorm(n, 0, 1)
df = data.frame(x1, x2, x3, x4, y)
return(df)
}
generarDatos()
mod = lm(data = df, y ~.)
mod = lm(data = df, y ~.)
df = generarDatos()
mod = lm(data = df, y ~.)
df = generarDatos()
mod = lm(data = df, y ~.)
sumario = summary(mod)
df = generarDatos()
mod = lm(data = df, y ~.)
sumario = summary(mod)
sumario$terms
mod
sumario
sumario$call
sumario$terms
sumario$residuals
sumario$aliased
sumario$aliased
sumario
sumario$df
sumario$coefficients
coefs = sumario$coefficients
coefs
type(coefs)
(coefs.type)
(coefs[2]
(coefs[2]
coefs[2]
coefs[2,]
coefs[,]
coefs[1,]
coefs[,1]
coefs[,4]
df = generarDatos()
mod = lm(data = df, y ~.)
sumario = summary(mod)
coefs = sumario$coefficients
pvals = coefs[,4]
pvals
pvals
pvals$x1
pvals["x1"]
pvals["x1"]>0
pvals["x1"]>2
pvals["x1"]
pvals
pvals<alpha
pvals<0.05
df = generarDatos()
mod = lm(data = df, y ~.)
sumario = summary(mod)
coefs = sumario$coefficients
pvals = coefs[,4]
pvals<0.05
df = generarDatos()
mod = lm(data = df, y ~.)
sumario = summary(mod)
coefs = sumario$coefficients
pvals = coefs[,4]
pvals<0.05
pvals
df = generarDatos()
mod = lm(data = df, y ~.)
sumario = summary(mod)
coefs = sumario$coefficients
pvals = coefs[,4]
pvals<0.05
pvals
rr = pvals<0.05
rr + 1
rr + rr
rr + rr + rr
coefs
coefs[,2]
obtenerCoefsySd = function(df){
mod = lm(data = df, y ~.)
sumario = summary(mod)
infoCoef = sumario$coefficients
coeficientes = infoCoef[,4]
sds = infoCoef[,2]
return(list(coeficientes, sds))
}
df = generarDatos()
mod = lm(data = df, y ~.)
sumario = summary(mod)
coefs = sumario$coefficients
pvals = coefs[,4]
sds = coefs[,2]
obtenerCoefsySd(df)
sds
pvals
pvals
sds
[a,b] = obtenerCoefsySd(df)
(a,b) = obtenerCoefsySd(df)
l= obtenerCoefsySd(df)
l[1]
l[1] + l[1]
l[1]
l[1][1]
l[1][1][1]
l[1][1][1][1]
l[1,]
l[,1]
l[1]
l[1] + l[1]
as.array(l[1])
as.array(l[1]) + as.array(l[1])
l[1] *2
l[1]
as.vector(l[1])
as.vector(l[1]) *2
tapply(c(v1, v2), c(v1, v2), FUN = sum)
v1=1
v2=2
tapply(c(v1, v2), c(v1, v2), FUN = sum)
sapply(c(v1, v2), c(v1, v2), FUN = sum)
sapply(c(v1, v2), FUN = sum)
l[1]
l[1][1]
[1]
l[1][1][1]
l[1]["x1"]
l[1][]
l= as.vector(obtenerCoefsySd(df))
l
unlist(l)
l= (obtenerCoefsySd(df))
unlist(l)
unlist(l)[1]
unlist(l)[4]
unlist(l[1])
unlist(l[1])[1]
realizarExperimentosCoeficientesSignificativos = function(B=1000){
df = generarDatos()
l = obtenerCoefsySd(df)
desvios = unlist(l[2])
significativos =  (unist(l[1]) < alpha)
for (i in (2:B)){
df = generarDatos()
l = obtenerCoefsySd(df)
desvios = desvios + unlist(l[2])
significativos =  (unlist(l[1]) < alpha)
}
}
unlist(l[1])
unlist(l[1])*1000
unlist(l[1])*1000
unlist(l[1]) + unlist(l[1])
realizarExperimentosCoeficientesSignificativos = function(B=1000){
df = generarDatos()
l = obtenerCoefsySd(df)
desvios = unlist(l[2])
significativos =  (unist(l[1]) < alpha)
for (i in (2:B)){
df = generarDatos()
l = obtenerCoefsySd(df)
desvios = desvios + unlist(l[2])
significativos =  (unlist(l[1]) < alpha)
}
return(list(significativos, desvios))
}
realizarExperimentosCoeficientesSignificativos()
realizarExperimentosCoeficientesSignificativos = function(B=1000){
df = generarDatos()
l = obtenerCoefsySd(df)
desvios = unlist(l[2])
significativos =  (unlist(l[1]) < alpha)
for (i in (2:B)){
df = generarDatos()
l = obtenerCoefsySd(df)
desvios = desvios + unlist(l[2])
significativos =  (unlist(l[1]) < alpha)
}
return(list(significativos, desvios))
}
realizarExperimentosCoeficientesSignificativos()
realizarExperimentosCoeficientesSignificativos = function(alpha=0.05, B=1000){
df = generarDatos()
l = obtenerCoefsySd(df)
desvios = unlist(l[2])
significativos =  (unlist(l[1]) < alpha)
for (i in (2:B)){
df = generarDatos()
l = obtenerCoefsySd(df)
desvios = desvios + unlist(l[2])
significativos =  (unlist(l[1]) < alpha)
}
return(list(significativos, desvios))
}
realizarExperimentosCoeficientesSignificativos()
realizarExperimentosCoeficientesSignificativos = function(alpha=0.05, B=1000){
df = generarDatos()
l = obtenerCoefsySd(df)
desvios = unlist(l[2])
significativos =  (unlist(l[1]) < alpha)
for (i in (2:B)){
df = generarDatos()
l = obtenerCoefsySd(df)
desvios = desvios + unlist(l[2])
significativos = significativos + (unlist(l[1]) < alpha)
}
return(list(significativos, desvios))
}
realizarExperimentosCoeficientesSignificativos()
realizarExperimentosCoeficientesSignificativos = function(alpha=0.05, B=1000){
df = generarDatos()
l = obtenerCoefsySd(df)
desvios = unlist(l[2])
significativos =  (unlist(l[1]) < alpha)
for (i in (2:B)){
df = generarDatos()
l = obtenerCoefsySd(df)
desvios = desvios + unlist(l[2])
significativos = significativos + (unlist(l[1]) < alpha)
}
return(list(significativos, desvios/B))
}
realizarExperimentosCoeficientesSignificativos()
realizarExperimentosCoeficientesSignificativos = function(alpha=0.05, B=1000){
df = generarDatos()
l = obtenerCoefsySd(df)
desvios = unlist(l[2])
significativos =  (unlist(l[1]) < alpha)
for (i in (2:B)){
df = generarDatos()
l = obtenerCoefsySd(df)
desvios = desvios + unlist(l[2])
significativos = significativos + (unlist(l[1]) < alpha)
}
return(list(significativos/B, desvios/B))
}
realizarExperimentosCoeficientesSignificativos() #Primera fila es
generarDatos = function(n=100){
x1 = runif(n, 0,5 )
x2 = runif(n, 0,5 )
x3 = 2*x1 + runif(n, -0.1, 0.1 )
x4 = -1*x1 + runif(n, -0.1, 0.1 )
y = 5 + 8*x1 - 5*x2 + x3 + 4*x4 + rnorm(n, 0, 1)
df = data.frame(x1, x2, x3, x4, y)
return(df)
}
realizarExperimentosCoeficientesSignificativos = function(alpha=0.05, B=1000){
df = generarDatos()
l = obtenerCoefsySd(df)
desvios = unlist(l[2])
significativos =  (unlist(l[1]) < alpha)
for (i in (2:B)){
df = generarDatos()
l = obtenerCoefsySd(df)
desvios = desvios + unlist(l[2])
significativos = significativos + (unlist(l[1]) < alpha)
}
return(list(significativos/B, desvios/B))
}
obtenerCoefsySd = function(df){
mod = lm(data = df, y ~.)
sumario = summary(mod)
infoCoef = sumario$coefficients
coeficientes = infoCoef[,4]
sds = infoCoef[,2]
return(list(coeficientes, sds))
}
realizarExperimentosCoeficientesSignificativos() #Primera fila es proporcion de veces que fue significativo el modelo.
# Segunda fila es el desvio estandar de esa variable en promedio.
df = generarDatos()
model <- glmnet(df$x1, df$y, alpha = 0)
library(glmnet)
df = generarDatos()
model <- glmnet(df$x1, df$y, alpha = 0)
df = generarDatos()
model <- glmnet(df, df$y, alpha = 0)
#view summary of model
summary(model)
df = generarDatos()
model <- glmnet(df, df$y, alpha = 0)
#view summary of model
sumario = summary(model)
model$a0
model$beta
model$nobs
sumario
df = generarDatos()
x <- data.matrix(mtcars[, c('x1', 'x2', 'x3', 'x4')])
df = generarDatos()
x <- data.matrix(df[, c('x1', 'x2', 'x3', 'x4')])
model <- glmnet(x, df$y, alpha = 0)
#view summary of model
sumario = summary(model)
sumario
sumario$lambda
model$lambda
df = generarDatos()
y = df$y
x <- data.matrix(df[, c('x1', 'x2', 'x3', 'x4')])
model <- glmnet(x, y, alpha = 0)
#view summary of model
sumario = summary(model)
cv_model <- cv.glmnet(x, y, alpha = 0, lambda=seq(0,19,0.01))
#find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
best_lambda
#produce plot of test MSE by lambda value
plot(cv_model)
best_lambda
#find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
best_lambda
#produce plot of test MSE by lambda value
plot(cv_model)
cv_model <- cv.glmnet(x, y, alpha = 0, lambda=seq(0,10,0.01))
#find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
best_lambda
#produce plot of test MSE by lambda value
plot(cv_model)
best_lambda
best_model <- glmnet(x, y, alpha = 0, lambda = best_lambda)
coef(best_model)
best_model <- glmnet(x, y, alpha = 0, lambda = best_lambda)
coefs = coef(best_model)
coefs
coefs.T
T(coefs)
transpose(coefs)
transform(coefs)
coefs[1,]
coefs[,1]
best_model <- glmnet(x, y, alpha = 0, lambda = best_lambda)
coefs = coef(best_model)
coefs[,1]
coefs
best_model$sd
best_model$
best_model$lambda
best_model$dim
best_model$jerr
best_model <- glmnet(x, y, alpha = 0, lambda = best_lambda)
coefs = coef(best_model)
coefs[,1]
cv_model <- cv.glmnet(x, y, alpha = 0, lambda=seq(0,10,0.01))
#find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
best_lambda
#produce plot of test MSE by lambda value
plot(cv_model)
best_model <- glmnet(x, y, alpha = 0, lambda = best_lambda)
coefs = coef(best_model)
coefs[,1]
df = generarDatos()
y = df$y
x <- data.matrix(df[, c('x1', 'x2', 'x3', 'x4')])
model <- glmnet(x, y, alpha = 0)
#view summary of model
sumario = summary(model)
cv_model <- cv.glmnet(x, y, alpha = 0, lambda=seq(0,10,0.01))
#find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
best_lambda
#produce plot of test MSE by lambda value
plot(cv_model)
best_model <- glmnet(x, y, alpha = 0, lambda = best_lambda)
coefs = coef(best_model)
coefs[,1]
